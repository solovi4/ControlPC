//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CommandMaker.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICommandExecutorService")]
    public interface ICommandExecutorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/VolumeIncrease", ReplyAction="http://tempuri.org/ICommandExecutorService/VolumeIncreaseResponse")]
        void VolumeIncrease();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/VolumeIncrease", ReplyAction="http://tempuri.org/ICommandExecutorService/VolumeIncreaseResponse")]
        System.Threading.Tasks.Task VolumeIncreaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/VolumeDecrease", ReplyAction="http://tempuri.org/ICommandExecutorService/VolumeDecreaseResponse")]
        void VolumeDecrease();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/VolumeDecrease", ReplyAction="http://tempuri.org/ICommandExecutorService/VolumeDecreaseResponse")]
        System.Threading.Tasks.Task VolumeDecreaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/GetVolumeLevel", ReplyAction="http://tempuri.org/ICommandExecutorService/GetVolumeLevelResponse")]
        int GetVolumeLevel();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/GetVolumeLevel", ReplyAction="http://tempuri.org/ICommandExecutorService/GetVolumeLevelResponse")]
        System.Threading.Tasks.Task<int> GetVolumeLevelAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/SetVolume", ReplyAction="http://tempuri.org/ICommandExecutorService/SetVolumeResponse")]
        void SetVolume(int level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/SetVolume", ReplyAction="http://tempuri.org/ICommandExecutorService/SetVolumeResponse")]
        System.Threading.Tasks.Task SetVolumeAsync(int level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/Mute", ReplyAction="http://tempuri.org/ICommandExecutorService/MuteResponse")]
        void Mute();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/Mute", ReplyAction="http://tempuri.org/ICommandExecutorService/MuteResponse")]
        System.Threading.Tasks.Task MuteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/ShutDown", ReplyAction="http://tempuri.org/ICommandExecutorService/ShutDownResponse")]
        void ShutDown();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/ShutDown", ReplyAction="http://tempuri.org/ICommandExecutorService/ShutDownResponse")]
        System.Threading.Tasks.Task ShutDownAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/CancelShutDown", ReplyAction="http://tempuri.org/ICommandExecutorService/CancelShutDownResponse")]
        void CancelShutDown();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/CancelShutDown", ReplyAction="http://tempuri.org/ICommandExecutorService/CancelShutDownResponse")]
        System.Threading.Tasks.Task CancelShutDownAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/MoveCursor", ReplyAction="http://tempuri.org/ICommandExecutorService/MoveCursorResponse")]
        void MoveCursor(int dx, int dy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/MoveCursor", ReplyAction="http://tempuri.org/ICommandExecutorService/MoveCursorResponse")]
        System.Threading.Tasks.Task MoveCursorAsync(int dx, int dy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/MouseLeftClick", ReplyAction="http://tempuri.org/ICommandExecutorService/MouseLeftClickResponse")]
        void MouseLeftClick();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/MouseLeftClick", ReplyAction="http://tempuri.org/ICommandExecutorService/MouseLeftClickResponse")]
        System.Threading.Tasks.Task MouseLeftClickAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/MouseRightClick", ReplyAction="http://tempuri.org/ICommandExecutorService/MouseRightClickResponse")]
        void MouseRightClick();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/MouseRightClick", ReplyAction="http://tempuri.org/ICommandExecutorService/MouseRightClickResponse")]
        System.Threading.Tasks.Task MouseRightClickAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/SendText", ReplyAction="http://tempuri.org/ICommandExecutorService/SendTextResponse")]
        void SendText(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandExecutorService/SendText", ReplyAction="http://tempuri.org/ICommandExecutorService/SendTextResponse")]
        System.Threading.Tasks.Task SendTextAsync(string text);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommandExecutorServiceChannel : CommandMaker.ServiceReference1.ICommandExecutorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommandExecutorServiceClient : System.ServiceModel.ClientBase<CommandMaker.ServiceReference1.ICommandExecutorService>, CommandMaker.ServiceReference1.ICommandExecutorService {
        
        public CommandExecutorServiceClient() {
        }
        
        public CommandExecutorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommandExecutorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandExecutorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandExecutorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void VolumeIncrease() {
            base.Channel.VolumeIncrease();
        }
        
        public System.Threading.Tasks.Task VolumeIncreaseAsync() {
            return base.Channel.VolumeIncreaseAsync();
        }
        
        public void VolumeDecrease() {
            base.Channel.VolumeDecrease();
        }
        
        public System.Threading.Tasks.Task VolumeDecreaseAsync() {
            return base.Channel.VolumeDecreaseAsync();
        }
        
        public int GetVolumeLevel() {
            return base.Channel.GetVolumeLevel();
        }
        
        public System.Threading.Tasks.Task<int> GetVolumeLevelAsync() {
            return base.Channel.GetVolumeLevelAsync();
        }
        
        public void SetVolume(int level) {
            base.Channel.SetVolume(level);
        }
        
        public System.Threading.Tasks.Task SetVolumeAsync(int level) {
            return base.Channel.SetVolumeAsync(level);
        }
        
        public void Mute() {
            base.Channel.Mute();
        }
        
        public System.Threading.Tasks.Task MuteAsync() {
            return base.Channel.MuteAsync();
        }
        
        public void ShutDown() {
            base.Channel.ShutDown();
        }
        
        public System.Threading.Tasks.Task ShutDownAsync() {
            return base.Channel.ShutDownAsync();
        }
        
        public void CancelShutDown() {
            base.Channel.CancelShutDown();
        }
        
        public System.Threading.Tasks.Task CancelShutDownAsync() {
            return base.Channel.CancelShutDownAsync();
        }
        
        public void MoveCursor(int dx, int dy) {
            base.Channel.MoveCursor(dx, dy);
        }
        
        public System.Threading.Tasks.Task MoveCursorAsync(int dx, int dy) {
            return base.Channel.MoveCursorAsync(dx, dy);
        }
        
        public void MouseLeftClick() {
            base.Channel.MouseLeftClick();
        }
        
        public System.Threading.Tasks.Task MouseLeftClickAsync() {
            return base.Channel.MouseLeftClickAsync();
        }
        
        public void MouseRightClick() {
            base.Channel.MouseRightClick();
        }
        
        public System.Threading.Tasks.Task MouseRightClickAsync() {
            return base.Channel.MouseRightClickAsync();
        }
        
        public void SendText(string text) {
            base.Channel.SendText(text);
        }
        
        public System.Threading.Tasks.Task SendTextAsync(string text) {
            return base.Channel.SendTextAsync(text);
        }
    }
}
